import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class WordCount {
    public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text word = new Text();


        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            StringTokenizer tokenizer = new StringTokenizer(value.toString());
            while (tokenizer.hasMoreTokens()) {
                word.set(tokenizer.nextToken());
                context.write(word, one);
            }
        }
    }


    public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable result = new IntWritable();


        public void reduce(Text key, Iterable<IntWritable> values, Context context)
                throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(key, result);
        }
    }


    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(WordCount.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

javac -classpath hadoop-core-1.2.1.jar -d WordCount WordCount.java
jar -cvf WordCount.jar -C WordCount/ .


Pig:
A = LOAD '/pigdir/class.csv' USING PigStorage(',') AS (uid:chararray, name:chararray, class:chararray, percentage:float);

D = GROUP A BY class;
C = FOREACH D GENERATE group AS class, COUNT(A) AS student_count;
F = FOREACH D GENERATE CONCAT((chararray)group, CONCAT(',', (chararray)AVG(A.percentage)));
ALL1 = GROUP A ALL;
avg1 = FOREACH ALL1 GENERATE AVG(A.percentage) AS overall_avg;

ClassAggregates = FOREACH D GENERATE 
    group AS class, 
    MIN(A.percentage) AS min_percentage, 
    MAX(A.percentage) AS max_percentage, 
    AVG(A.percentage) AS avg_percentage, 
    SUM(A.percentage) AS sum_percentage;

OverallStats = FOREACH ALL1 GENERATE 
    MIN(A.percentage) AS overall_min,
    MAX(A.percentage) AS overall_max,
    SUM(A.percentage) AS overall_sum;


MongoDB:
db.employees.aggregate([{ $group: { _id: null, maxSalary: { $max: "$salary" } } }])
db.employees.aggregate([{ $group: { _id: null, sumSalary: { $sum: "$salary" } } }])
db.employees.aggregate([{ $group: { _id: "Taplu", maxSalary: { $max: "$salary" } } }])
db.employees.aggregate([{ $group: { _id: "$name", maxSalary: { $max: "$salary" } } }])
db.employees.aggregate([
  { $match: { name: "Taplu" } },
  { $group: { _id: "Taplu", maxSalary: { $max: "$salary" } } }
])
db.employees.aggregate([
  { $match: { "address.city": "Mumbai" } },
  { $group: { _id: null, avgSalary: { $avg: "$salary" } } }
])
db.employees.aggregate([
  { $match: { skills: { $in: ["JavaScript", "Java"] } } },
  { $group: { _id: null, avgSalary: { $avg: "$salary" } } }
])



